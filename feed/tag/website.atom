<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RyanCollins.org</title><link href="http://ryancollins.org/" rel="alternate"></link><link href="http://ryancollins.org/feed/tag/website.atom" rel="self"></link><id>http://ryancollins.org/</id><updated>2015-06-23T11:43:00-04:00</updated><entry><title>Publishing using Sphinx to Github</title><link href="http://ryancollins.org/2015/06/23/publishing-using-sphinx-to-github/" rel="alternate"></link><updated>2015-06-23T11:43:00-04:00</updated><author><name>mr.rcollins</name></author><id>tag:ryancollins.org,2015-06-23:2015/06/23/publishing-using-sphinx-to-github/</id><summary type="html">&lt;p&gt;I've been playing around with &lt;a href="http://sphinx-doc.org/index.html"&gt;Sphinx&lt;/a&gt; as a digital publishing tool. It can take multiple files written in reStructuredText (similar to Markdown, which is plain text with minimal markup) and create not only a website, but also PDFs and ePubs (and more, list is on the website). An example is the &lt;a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/"&gt;Sublime Text Unofficial Documentation&lt;/a&gt;. If you click on the &lt;strong&gt;Read the Docs&lt;/strong&gt; link in the bottom left of the window, you can see the documentation in other formats.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; will automatically create a website and other files from a Github repository, but you can also publish yourself to Github without using another service. My problem came from an issue with Github ignoring the folder &lt;em&gt;_static&lt;/em&gt;, which is where Sphinx puts assets for the website. The solution is simple enough, have a &lt;em&gt;.nojekyll&lt;/em&gt; file in the root of the website. The question was how to do that automatically. What I did was add a new target to the Makefile[1]:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SPHINXBUILD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ALLSPHINXOPTS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BUILDDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
    &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BUILDDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="n"&gt;nojekyll&lt;/span&gt;
    &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BUILDDIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
    &lt;span class="nd"&gt;@echo&lt;/span&gt;
    &lt;span class="nd"&gt;@echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Published to Github&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when I type &lt;code&gt;make github&lt;/code&gt;, the website will be rebuilt, a &lt;em&gt;.nojekyll&lt;/em&gt; file will be created, the website will be imported into the gh-pages branch and that branch will be pushed to Github.&lt;/p&gt;
&lt;p&gt;[1]: This assumes you have already set up authentication to push a branch to Github and have installed ghp-import.&lt;/p&gt;</summary><category term="website"></category><category term="sphinx"></category><category term="github"></category></entry><entry><title>Scheduled posting with Pelican</title><link href="http://ryancollins.org/2013/05/26/scheduled-posting-with-pelican/" rel="alternate"></link><updated>2013-05-26T08:31:00-04:00</updated><author><name>mr.rcollins</name></author><id>tag:ryancollins.org,2013-05-26:2013/05/26/scheduled-posting-with-pelican/</id><summary type="html">&lt;p&gt;After my &lt;a href="http://localhost:8000/2013/05/06/good-bye-wordpress-hello-pelican/"&gt;switch from Wordpress to Pelican&lt;/a&gt; I realized that there was one feature that I really was missing, the ability to schedule posts in the future. When you have an itch, you scratch it. By using my Linux box at home (you could use an OS X machine also) and Dropbox, I can now schedule posts. &lt;/p&gt;
&lt;h1&gt;Prequisites&lt;/h1&gt;
&lt;p&gt;On my server I set up Dropbox. There is a script on the Dropbox site that allows you to set it up on &lt;strong&gt;headless&lt;/strong&gt; servers (a server without a monitor, keyboard, or mouse). In my DropBox folder, I created a folder called &lt;strong&gt;ToPost&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;The script&lt;/h1&gt;
&lt;p&gt;You'll need to adjust the path to &lt;em&gt;TOPOST&lt;/em&gt; and to the &lt;em&gt;SITE&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;TOPOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Dropbox/Elements/RyanCollins.org/ToPost/*.markdown
&lt;span class="nv"&gt;SITE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Development/ryancollins.org

&lt;span class="nb"&gt;shopt&lt;/span&gt; -s nullglob

&lt;span class="nv"&gt;YEAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d %H:%M&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOPOST&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;DATELINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;^Date: &amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATELINE&lt;/span&gt;&lt;span class="p"&gt;#* &lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &amp;lt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NOW&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        mv &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SITE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/content/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;YEAR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SITE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        make rsync_upload
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Scheduling&lt;/h1&gt;
&lt;p&gt;At the command prompt, run crontab with the -e parameter so we can add a scheduled job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ryan@serverbot:~$ crontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add a line to our script to run it every 15 minutes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*/15    *   *   *   *    /home/ryan/Development/ryancollins.org/dbupdate.sh
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pelican"></category><category term="website"></category><category term="programming"></category></entry></feed>